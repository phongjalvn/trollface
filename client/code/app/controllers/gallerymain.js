// Generated by CoffeeScript 1.3.3
var Galleries, Gallery, GalleryMain, Images, P2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

P2 = require('p2');

Gallery = require('/models/gallery');

Galleries = require('/controllers/galleries');

Images = require('/controllers/images');

GalleryMain = (function(_super) {

  __extends(GalleryMain, _super);

  GalleryMain.prototype.className = 'main';

  GalleryMain.prototype.elements = {
    'aside': 'formHolder',
    'form': 'form',
    '.images-wrapper': 'imgHolder',
    'footer .submit': 'footer',
    '.gallery-wrapper': 'galleryHolder',
    '.message': 'message'
  };

  GalleryMain.prototype.events = {
    'click .green': 'formHandle',
    'click .red': 'back',
    'blur input': 'formCheck'
  };

  function GalleryMain() {
    this.back = __bind(this.back, this);

    this.formHandle = __bind(this.formHandle, this);

    this.launchEditor = __bind(this.launchEditor, this);

    this.formCheck = __bind(this.formCheck, this);

    var _this = this;
    GalleryMain.__super__.constructor.apply(this, arguments);
    this.galleries = new Galleries;
    this.images = new Images;
    ss.event.on('postSuccess', function(res) {
      var mess;
      P2.trigger('loader.hide');
      mess = ss.tmpl['gallery-posted'].render({
        message: message.id
      });
      _this.imgHolder.prepend(mess);
      return $('.message').last().slideDown().delay(5000).fadeOut(500, function() {
        return $('.message').remove();
      });
    });
    ss.event.on('auth', function(userId) {
      _this.userId = userId;
      _this.message.fadeOut();
      Gallery.fetch();
      _this.append(_this.images);
      _this.append(_this.galleries);
      P2.trigger('loader.hide');
      return $('#fb-login').hide();
    });
    P2.bind('loader.show', function() {
      return $('.loader').fadeIn();
    });
    P2.bind('loader.hide', function() {
      return $('.loader').fadeOut();
    });
    P2.bind('gallery.show', function() {
      _this.formHolder.slideUp();
      _this.imgHolder.fadeIn();
      return _this.footer.hide();
    });
    P2.bind('gallery.form', function(imgurl, title) {
      _this.imgUrl = imgurl;
      $('footer .submit').show();
      _this.imgHolder.fadeOut();
      _this.galleryHolder.fadeOut();
      _this.formHolder.find('img').remove();
      return _this.formHolder.append("<img src='" + imgurl + "' id='featherimage'/>").slideDown(500, function() {
        _this.launchEditor('featherimage', _this.imgUrl);
        P2.trigger('loader.show');
        _this.footer.fadeIn();
        _this.formHolder.css('overflow-y', 'auto');
        return _this.formHolder.find('.message').text(title);
      });
    });
    this.render();
  }

  GalleryMain.prototype.formCheck = function(e) {
    var ele;
    ele = $(e.currentTarget);
    if (ele.val() === '') {
      return ele.parents('li').addClass('error').removeClass('success');
    } else {
      return ele.parents('li').addClass('success').removeClass('error');
    }
  };

  GalleryMain.prototype.launchEditor = function(id, src) {
    return window.featherEditor = new Aviary.Feather({
      apiKey: "b073f6881",
      appendTo: "feather",
      minimumStyling: true,
      theme: "black",
      noCloseButton: true,
      language: "vi",
      tools: "all",
      maxSize: "670",
      openType: "inline",
      onLoad: function() {
        featherEditor.launch({
          image: id,
          url: src
        });
        return $("#" + id).hide();
      },
      onReady: function() {
        $('#avpw_aviary_about').html('<p>Copyright 2012. Vietprotocol</p>');
        return P2.trigger('loader.hide');
      },
      onSaveButtonClicked: function() {
        return P2.trigger('loader.show');
      },
      onError: function() {
        $('.message').text('An error occured! Reloading browser...');
        return setTimeout(function() {
          return window.localtion = window.location;
        }, 2000);
      },
      onSave: function(imageID, newURL) {
        var img;
        featherEditor.close();
        img = $("#" + imageID);
        return $.post("http://api.imgur.com/2/upload.json", {
          key: "6a29ef3026a6c6343b65646f222b2dd2",
          image: newURL,
          type: "url"
        }, function(res) {
          res = jQuery.parseJSON(res);
          $('.message').text($('aside h3').text());
          return img.attr("src", res.upload.links.original).load(function() {
            img.fadeIn();
            P2.trigger('loader.hide');
            $('aside form').css('display', 'block');
            return $("#posttowall, .submit").css("display", "inline-block");
          });
        });
      }
    });
  };

  GalleryMain.prototype.formHandle = function(e) {
    var imgUrl, message;
    e.preventDefault();
    this.imgHolder.fadeIn();
    this.galleryHolder.fadeIn();
    this.formHolder.fadeOut();
    this.footer.fadeOut();
    this.form.slideUp();
    $('#posttowall').hide();
    imgUrl = $('#featherimage').attr('src');
    message = $('input#message').val();
    return ss.rpc('user.makePost', imgUrl, message, function() {
      return P2.trigger('loader.show');
    });
  };

  GalleryMain.prototype.back = function() {
    this.imgHolder.show();
    this.galleryHolder.fadeIn();
    $('footer .submit').hide();
    this.imgHolder.scrollTo('.current');
    this.formHolder.slideUp();
    this.form.slideUp();
    this.footer.fadeOut();
    $('#posttowall').hide();
    return featherEditor.close();
  };

  GalleryMain.prototype.render = function() {
    this.append(ss.tmpl['gallery-login'].render());
    this.append(ss.tmpl['gallery-footer'].render());
    return this.append(ss.tmpl['gallery-loader'].render());
  };

  return GalleryMain;

})(P2.Controller);

module.exports = GalleryMain;
